---
const { id, imageSrc = '', width = 500, altText } = Astro.props;
---

<div class="wrapper z-10 mx-auto my-0 flex max-w-[350px]">
	<picture
		class="image relative -z-10 animate-cardImageIn overflow-hidden rounded-md shadow-[0px_0px_30px] shadow-warning-content transition-all duration-300 ease-out dark:shadow-accent-focus"
		class="block"
		class:list={[`max-w-[${width}px]`]}
	>
		<img id={id} src={imageSrc} alt={altText} width={width} />
	</picture>
</div>
<script is:inline>
	var delay = 50;
	var alpha = 15;
	var lastMouseHoverTriggerTime = Date.now();
	var imageWrappers = document.getElementsByClassName('wrapper');
	[...imageWrappers].forEach((imageWrapper) => {
		const image = imageWrapper.firstChild;
		imageWrapper?.addEventListener('mousemove', (event) => {
			const currentTime = Date.now();
			if (currentTime - lastMouseHoverTriggerTime < delay) {
				return;
			}
			lastMouseHoverTriggerTime = currentTime;

			const { width, height } = imageWrapper.getBoundingClientRect();
			const halfWidth = width / 2;
			const halfHeight = height / 2;

			const { offsetX, offsetY } = event;
			const rotationX = ((offsetX - halfWidth) / halfWidth) * alpha;
			const rotationY = ((halfHeight - offsetY) / halfHeight) * alpha;
			image.style.transform = `rotateX(${rotationY}deg) rotateY(${rotationX}deg)`;

			const translationX = -((offsetX - halfWidth) / halfWidth) * alpha;
			const translationY = -((offsetY - halfHeight) / halfHeight) * alpha;

			const translation =
				(Math.abs(translationX) + Math.abs(translationY)) / 2 +
				2 * alpha;

			image.style.boxShadow = `${translationX}px ${translationY}px ${translation}px var(--tw-shadow-color)`;
		});
		imageWrapper?.addEventListener('mouseleave', () => {
			image.style.transition = 'all .3s ease-out';
			image.style.transform = `rotateX(0deg) rotateY(0deg)`;
			image.style.boxShadow = `0px 0px 30px var(--tw-shadow-color)`;
		});
	});
</script>
<style>
	.wrapper {
		perspective: 50rem;
	}
</style>
